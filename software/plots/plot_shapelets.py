#!python3

# Copyright GMicro UFSM 2020.
# This source describes Open Hardware and is licensed under the CERN-OHLS v2
# You may redistribute and modify this documentation and make products
# using it under the terms of the CERN-OHL-S v2 (https:/cern.ch/cern-ohl).
# This documentation is distributed WITHOUT ANY EXPRESS OR IMPLIED
# WARRANTY, INCLUDING OF MERCHANTABILITY, SATISFACTORY QUALITY
# AND FITNESS FOR A PARTICULAR PURPOSE. Please see the CERN-OHL-S v2
# for applicable conditions.
# Source location: https://github.com/vctrop/shapelet_distance_hardware_accelerator
# As per CERN-OHL-S v2 section 4, should You produce hardware based on
# these sources, You must maintain the Source Location visible on any
# product you make using this documentation.


import matplotlib.pyplot as plt
import numpy as np

ts0 = [0.68834554,0.6172271,0.6172271,0.56981481,0.68834554,0.64093325,0.71205169,0.78317013,0.49869637,0.47499023,0.54610867,0.33275335,0.33275335,0.26163491,0.23792876,0.26163491,0.21422262,0.21422262,0.26163491,0.23792876,0.095691885,0.11939803,0.11939803,-0.022838848,0.16681032,0.28534105,0.16681032,0.048279591,0.16681032,0.16681032,0.14310418,-0.80514168,-2.1800981,-3.0098133,-3.0098133,-2.8438703,-2.962401,-2.5831026,-2.0378613,-2.0852736,-1.8482121,-1.4689138,-1.2318524,-1.1370278,-0.6629048,-0.37843104,-0.33101875,-0.14136958,0.28534105,0.45128408,0.49869637,0.40387178,0.33275335,0.47499023,0.28534105,0.42757794,0.49869637,0.6172271,0.54610867,0.49869637,0.54610867,0.6172271,0.6646394,0.6646394,0.71205169,0.80687628,0.78317013,0.85428856,0.80687628,0.90170086,0.85428856,0.73575783,0.71205169,0.64093325,0.56981481,0.45128408,0.40387178,0.35645949,0.21422262,0.14310418,0.16681032,0.14310418]
s0_ts0 = [0.68834554,0.6172271,0.6172271,0.56981481,0.68834554,0.64093325,0.71205169,0.78317013,0.49869637,0.47499023, 0.54610867,0.33275335,0.33275335,0.26163491,0.23792876,0.26163491,0.21422262,0.21422262,0.26163491,0.23792876]
ts3 = [-0.34442631,-0.32978506,-0.32978506,-0.32978506,-0.37370879,-0.35906755,-0.35906755,-0.21265512,-0.15409015,-0.11016643,0.050887248,0.06552849,0.050887248,0.036246005,-0.051601452,-0.12480766,-0.15409015,-0.2419376,-0.25657885,-0.28586133,-0.30050258,-0.40299127,-0.41763252,-0.46155625,-0.446915,-0.43227377,-0.46155625,-0.46155625,-0.41763252,-0.446915,-0.43227377,-0.022318966,0.16801719,-0.59332744,-1.413237,-2.1452992,-2.4088415,-2.6577426,-2.4234828,-1.896398,-1.7207032,-1.6474969,-1.530367,-1.4278782,-1.1496946,-0.87151105,-0.57868619,-0.35906755,-0.2712201,0.021604762,0.27050589,0.46084204,0.6511782,0.66581944,0.72438442,0.76830815,0.78294938,0.87079684,0.92936182,0.98792676,1.1489804,1.1343392,1.2661104,1.3393166,1.3685991,1.4710878,1.5150115,1.5589352,1.5589352,1.5735765,1.5003702,1.3685991,1.2661104,1.1196979,1.0025681,0.88543809,0.78294938,0.68046069,0.56333075,0.49012453,0.37299458,0.3437121]
s30_ts3 = [-0.43227377,-0.022318966,0.16801719,-0.59332744,-1.413237,-2.1452992,-2.4088415,-2.6577426,-2.4234828,-1.896398,-1.7207032,-1.6474969,-1.530367,-1.4278782,-1.1496946,-0.87151105,-0.57868619,-0.35906755,-0.2712201,0.021604762]

# plt.figure()
# plt.xlim(0,86)
# plt.ylim(-3.5,2)
# plt.plot(ts0, 'black', linewidth = 3)

# plt.figure()
# plt.xlim(0,86)
# plt.ylim(-3.5,2)
# plt.plot(ts3, 'black', linewidth = 3)

# plt.figure()
# plt.xlim(0,86)
# plt.ylim(-3.5,2)
# plt.plot(s0_ts0, '#336600', linewidth = 3)

# plt.figure()
# plt.xlim(0,86)
# plt.ylim(-3.5,2)
# plt.plot(s30_ts3, '#003366', linewidth = 3)

# plt.show()


s0_avg = np.mean(s0_ts0)
s0_std = np.std(s0_ts0, ddof=1)
s0_norm = (np.array(s0_ts0) - s0_avg) / s0_std

s30_avg = np.mean(s30_ts3)
s30_std = np.std(s30_ts3, ddof=1)
s30_norm = (np.array(s30_ts3) - s30_avg) / s30_std

plt.figure()
plt.xlim(0,86)
plt.ylim(-3.5,2)
plt.plot(s0_norm, '#336600', linewidth = 3)

plt.figure()
plt.xlim(0,86)
plt.ylim(-3.5,2)
plt.plot(s30_norm, '#003366', linewidth = 3)

plt.show()
